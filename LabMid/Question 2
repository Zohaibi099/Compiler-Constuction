using System;
using System.Text.RegularExpressions;
using System.Data;
using System.Linq;

class Program
{
    // Entry point of the application
    static void Main()
    {
        // Sample code string containing variable declarations with potential special characters
        string inputCode = "var a1 = 12@; float b2 = 3.14$$; int c3 = 5#; string d4 = 'text';";
        
        // Regex pattern explanation:
        // (var|float|int|string) - matches the type of variable
        // \s+([abc]\d+) - matches variable names that start with a, b, or c followed by digits
        // \s*=\s* - matches the equal sign with optional spaces
        // ([^;]*[^a-zA-Z0-9\s][^;]*) - captures values that contain at least one special (non-alphanumeric) character
        string pattern = @"(var|float|int|string)\s+([abc]\d+)\s*=\s*([^;]*[^a-zA-Z0-9\s][^;]*);";
        
        // Apply the regex to find matches in the input string
        var matches = Regex.Matches(inputCode, pattern);
        
        // Print the header of the results table
        Console.WriteLine("VarName\tSpecialSymbol\tTokenType");
        Console.WriteLine("----------------------------------");
        
        // Iterate over each match found by the regex
        foreach (Match match in matches)
        {
            // Extract variable name (e.g., a1, b2, etc.)
            string varName = match.Groups[2].Value;
            
            // Extract the value assigned to the variable and trim whitespace
            string value = match.Groups[3].Value.Trim();
            
            // Find the first special character in the value
            char specialSymbol = value.FirstOrDefault(c => !char.IsLetterOrDigit(c) && !char.IsWhiteSpace(c));
            
            // Get the token type (var, float, int, or string)
            string tokenType = match.Groups[1].Value;
            
            // Print the variable name, special character, and token type
            Console.WriteLine($"{varName}\t{specialSymbol}\t\t{tokenType}");
        }
    }
}
